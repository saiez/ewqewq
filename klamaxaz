local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/k4alt/gray/main/Library.lua'))()
local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/k4alt/gray/main/theme.lua'))()
local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/k4alt/gray/main/save.lua'))()

local Window = Library:CreateWindow({
    Title = 'KEANW ; 1.0.2',
    Center = true, 
    AutoShow = true,
})

-- You do not have to set your tabs & groups up this way, just a prefrence.
local Tabs = {
    -- Creates a new tab titled Main
    ['Aiming'] = Window:AddTab("Aiming"), 
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
local AimingLeftBox = Tabs.Aiming:AddLeftGroupbox('Silent')

AimingLeftBox:AddToggle('SilentToggle', {
    Text = 'Silent Aim',
    Default = KEANW.Silent.Enabled, -- Default value (true / false)
    Tooltip = 'Enables/Disables Silent Aim', -- Information shown when you hover over the toggle
})

Toggles.SilentToggle:OnChanged(function()
    getgenv().KEANW.Silent.Enabled = Toggles.SilentToggle.Value
end)

AimingLeftBox:AddInput('SilentKeybindText', {
    Default = KEANW.Silent.Keybind,
    Numeric = false, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter

    Text = 'Keybind',
    Tooltip = 'Sets the Silent Aims Keybind Toggle', -- Information shown when you hover over the textbox

    Placeholder = 'Keybind', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text
})

Options.SilentKeybindText:OnChanged(function()
    getgenv().KEANW.Silent.Keybind = Options.SilentKeybindText.Value
end)

AimingLeftBox:AddToggle('UseKeybindToggle', {
    Text = 'UseKeybind',
    Default = KEANW.Silent.UseKeybind, -- Default value (true / false)
    Tooltip = 'Enables/Disables Use Keybind', -- Information shown when you hover over the toggle
})

Toggles.UseKeybindToggle:OnChanged(function()
    getgenv().KEANW.Silent.UseKeybind = Toggles.UseKeybindToggle.Value
end)

AimingLeftBox:AddDropdown('PartDrop', {
    Values = { 'HumanoidRootPart', 'UpperTorso', 'LowerTorso', 'Head' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Part',
    Tooltip = 'Sets the silents part', -- Information shown when you hover over the textbox
})

Options.PartDrop:OnChanged(function()
    getgenv().KEANW.Silent.Part = Options.PartDrop.Value
end)

AimingLeftBox:AddToggle('ClosestPartToggle', {
    Text = 'ClosestPart',
    Default = KEANW.Silent.ClosestPart, -- Default value (true / false)
    Tooltip = 'Enables/Disables Use Keybind', -- Information shown when you hover over the toggle
})

Toggles.ClosestPartToggle:OnChanged(function()
    getgenv().KEANW.Silent.ClosestPart = Toggles.ClosestPartToggle.Value
end)

AimingLeftBox:AddInput('PredText', {
    Default = KEANW.Silent.Prediction,
    Numeric = true, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter

    Text = 'Prediction',
    Tooltip = 'Sets the Silent Aim prediction', -- Information shown when you hover over the textbox

    Placeholder = 'Prediction', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text
})

Options.PredText:OnChanged(function()
    getgenv().KEANW.Silent.Prediction = Options.PredText.Value
end)

AimingLeftBox:AddToggle('AutoPredToggle', {
    Text = 'AutoPred',
    Default = KEANW.AutoPred.Enabled, -- Default value (true / false)
    Tooltip = 'Enables/Disables Use Keybind', -- Information shown when you hover over the toggle
})

Toggles.AutoPredToggle:OnChanged(function()
    getgenv().KEANW.AutoPred.Enabled = Toggles.AutoPredToggle.Value
end)

AimingLeftBox:AddToggle('RangePredToggle', {
    Text = 'RangePred',
    Default = KEANW.Range.Prediction.Enabled, -- Default value (true / false)
    Tooltip = 'Enable/Disables RangePred', -- Information shown when you hover over the toggle
})

Toggles.RangePredToggle:OnChanged(function()
    getgenv().KEANW.Range.Prediction.Enabled = Toggles.RangePredToggle.Value
end)




AimingLeftBox:AddDivider()


AimingLeftBox:AddSlider('FOVSlid', {
    Text = 'Radius',

    Default = KEANW.FOV.Radius,
    Min = 5,
    Max = 80,
    Rounding = 1,

    Compact = false, -- If set to true, then it will hide the label
})

AimingLeftBox:AddToggle('VisibleTog', {
    Text = 'Visible',
    Default = KEANW.FOV.Visible, -- Default value (true / false)
    Tooltip = 'Enable/Disables Visible FOV', -- Information shown when you hover over the toggle
})

Toggles.VisibleTog:OnChanged(function()
    getgenv().KEANW.FOV.Visible = Toggles.VisibleTog.Value
end)

Options.FOVSlid:OnChanged(function()
    getgenv().KEANW.FOV.Radius = Options.FOVSlid.Value
end)

AimingLeftBox:AddToggle('GunFOVToggle', {
    Text = 'GunFOV',
    Default = KEANW.GunFOV.Enabled, -- Default value (true / false)
    Tooltip = 'Enable/Disables GunFOV', -- Information shown when you hover over the toggle
})

Toggles.GunFOVToggle:OnChanged(function()
    getgenv().KEANW.GunFOV.Enabled = Toggles.GunFOVToggle.Value
end)

AimingLeftBox:AddToggle('RangeFOVToggle', {
    Text = 'RangeFOV',
    Default = KEANW.Range.FOV.Enabled, -- Default value (true / false)
    Tooltip = 'Enable/Disables RangeFOV', -- Information shown when you hover over the toggle
})

Toggles.RangeFOVToggle:OnChanged(function()
    getgenv().KEANW.Range.FOV.Enabled = Toggles.RangeFOVToggle.Value
end)

AimingLeftBox:AddLabel('Color'):AddColorPicker('ColorPicker', {
    Default = Color3.new(0, 1, 0), -- Bright green
    Title = 'Color', -- Optional. Allows you to have a custom color picker title (when you open it)
})

Options.ColorPicker:OnChanged(function()
    Circle.Color = Options.ColorPicker.Value
end)

Options.ColorPicker:SetValueRGB(Color3.fromRGB(0, 255, 140))

AimingLeftBox:AddDivider()

AimingLeftBox:AddToggle('DeathTog', {
    Text = 'Death Check',
    Default = KEANW.Silent.Checks.DeathCheck, -- Default value (true / false)
    Tooltip = 'Enable/Disables Death Check', -- Information shown when you hover over the toggle
})

Toggles.DeathTog:OnChanged(function()
    getgenv().KEANW.Silent.Checks.DeathCheck = Toggles.DeathTog.Value
end)

AimingLeftBox:AddToggle('VisTog', {
    Text = 'VisibleCheck',
    Default = KEANW.Silent.Checks.VisibleCheck, -- Default value (true / false)
    Tooltip = 'Enable/Disables Death Check', -- Information shown when you hover over the toggle
})

Toggles.VisTog:OnChanged(function()
    getgenv().KEANW.Silent.Checks.VisibleCheck = Toggles.VisTog.Value
end)

local RightGroupBox = Tabs.Aiming:AddRightGroupbox('Aimbot')

RightGroupBox:AddInput('MyTextboxKey', {
    Default = KEANW.Aimbot.Keybind,
    Numeric = true, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter

    Text = 'Keybind',
    Tooltip = 'Sets the Keybind', -- Information shown when you hover over the textbox

    Placeholder = 'Toggle Key', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text
})

Options.MyTextboxKey:OnChanged(function()
    getgenv().AimlockKey = Options.MyTextboxKey.Value
end)

RightGroupBox:AddDropdown('MyDropdown2', {
    Values = { 'HumanoidRootPart', 'UpperTorso', 'LowerTorso', 'Head'},
    Default = 2, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Part',
    Tooltip = 'What part to aim at (non closest part)', -- Information shown when you hover over the textbox
})

Options.MyDropdown2:OnChanged(function()
    key21 = Options.MyDropdown2.Value
end)

RightGroupBox:AddInput('MyTextboxPred', {
    Default = KEANW.Aimbot.Prediction,
    Numeric = true, -- true / false, only allows numbers
    Finished = false, -- true / false, only calls callback when you press enter

    Text = 'Prediction',
    Tooltip = 'Sets the Prediction', -- Information shown when you hover over the textbox

    Placeholder = 'Prediction Amount', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text
})

Options.MyTextboxPred:OnChanged(function()
    getgenv().PredictionVelocity = Options.MyTextboxPred.Value
end)


RightGroupBox:AddToggle('MyToggleSmooth', {
    Text = 'Smoothness',
    Default = KEANW.Aimbot.Smoothness, -- Default value (true / false)
    Tooltip = 'Smoothness (makes you look more legit)', -- Information shown when you hover over the toggle
})

RightGroupBox:AddSlider('MySliderAM', {
    Text = 'Smoothness: ',

    Default = 0.05,
    Min = 0.01,
    Max = 1,
    Rounding = 2,

    Compact = false, -- If set to true, then it will hide the label
})

-- Options is a table added to getgenv() by the library

Options.MySliderAM:OnChanged(function()
    getgenv().SmoothnessAmount = Options.MySliderAM.Value
end)

RightGroupBox:AddToggle('MyToggleGG', {
    Text = 'Range-Smoothness',
    Default = KEANW.Range.Smoothness.Enabled, -- Default value (true / false)
    Tooltip = 'Smoothness based on range', -- Information shown when you hover over the toggle
})

Toggles.MyToggleGG:OnChanged(function()
    -- here we get our toggle object & then get its value
    getgenv().KEANW.Range.Smoothness.Enabled = Toggles.MyToggleGG.Value
end)



local RightGroupBox = Tabs.Aiming:AddRightGroupbox('Checks')

RightGroupBox:AddToggle('MyToggleFP', {
    Text = 'First-Person',
    Default = true, -- Default value (true / false)
    Tooltip = 'Traces in first person', -- Information shown when you hover over the toggle
})

Toggles.MyToggleFP:OnChanged(function()
    -- here we get our toggle object & then get its value
    getgenv().FirstPerson = Toggles.MyToggleFP.Value
end)
RightGroupBox:AddToggle('MyToggleTP', {
    Text = 'Third-Person',
    Default = true, -- Default value (true / false)
    Tooltip = 'Traces in third person', -- Information shown when you hover over the toggle
})

Toggles.MyToggleTP:OnChanged(function()
    -- here we get our toggle object & then get its value
    getgenv().ThirdPerson = Toggles.MyToggleTP.Value
end)

RightGroupBox:AddLabel('')

RightGroupBox:AddToggle('MyToggleWA', {
    Text = 'Death Check',
    Default = true, -- Default value (true / false)
    Tooltip = 'Unlocks on player death', -- Information shown when you hover over the toggle
})

Toggles.MyToggleWA:OnChanged(function()
    -- here we get our toggle object & then get its value
    getgenv().DeathCheck = Toggles.MyToggleWA.Value
end)

RightGroupBox:AddToggle('MyToggleYE', {
    Text = 'Wall Check',
    Default = true, -- Default value (true / false)
    Tooltip = 'Unlocks if player is behind wall.', -- Information shown when you hover over the toggle
})

RightGroupBox:AddToggle('MyToggleEE', {
    Text = 'Own-Death Check',
    Default = true, -- Default value (true / false)
    Tooltip = 'Unlocks on your death', -- Information shown when you hover over the toggle
})

Toggles.MyToggleEE:OnChanged(function()
    -- here we get our toggle object & then get its value
    getgenv().KEANW.Aimbot.OwnDeathCheck = Toggles.MyToggleEE.Value
end)




task.spawn(function()
    while true do
        wait(1)

        -- example for checking if a keybind is being pressed
        local state = Options.KeyPicker:GetState()
        if state then
            print('KeyPicker is being held down')
        end

        if Library.Unloaded then break end
    end
end)



-- Library functions
-- Sets the watermark visibility
Library:SetWatermarkVisibility(KEANW.Main.GuiInfo)

game:GetService("RunService").Heartbeat:Connect(function() 
        local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
        local pingValue = string.split(ping, " ")[1]
        local pingNumber = tonumber(pingValue)
        Library:SetWatermark('Prediction: ' .. KEANW.Silent.Prediction .. '  Ping: ' .. pingNumber)
    end)

Library.KeybindFrame.Visible = false; -- todo: add a function for this

Library:OnUnload(function()
    print('Unloaded!')
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end) 
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'M', NoUI = true, Text = 'Menu keybind' }) 

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager. 
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings() 

-- Adds our MenuKeybind to the ignore list 
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

-- use case for doing it this way: 
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings']) 

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])
-- You can use the SaveManager:LoadAutoloadConfig() to load a config 
-- which has been marked to be one that auto loads!

local cheatsf = Instance.new("Folder", game.CoreGui) cheatsf.Name = "cheats"
local espf = Instance.new("Folder", cheatsf) espf.Name = "esp"
if KEANW.Esp.Enabled then
    function addEsp(player)
        local bbg = Instance.new("BillboardGui", espf)
        bbg.Name = player.Name
        bbg.AlwaysOnTop = true
        bbg.Size = UDim2.new(4,0,5.4,0)
        bbg.ClipsDescendants = false
        
        local outlines = Instance.new("Frame", bbg)
        outlines.Size = UDim2.new(1,0,1,0)
        outlines.BorderSizePixel = 0
        outlines.BackgroundTransparency = 1
        local left = Instance.new("Frame", outlines)
        left.BorderSizePixel = 0
        left.Size = UDim2.new(0,1,1,0)
        local right = left:Clone()
        right.Parent = outlines
        right.Size = UDim2.new(0,-1,1,0)
        right.Position = UDim2.new(1,0,0,0)
        local up = left:Clone()
        up.Parent = outlines
        up.Size = UDim2.new(1,0,0,1)
        local down = left:Clone()
        down.Parent = outlines
        down.Size = UDim2.new(1,0,0,-1)
        down.Position = UDim2.new(0,0,1,0)
        
        local info = Instance.new("BillboardGui", bbg)
        info.Name = "info"
        info.Size = UDim2.new(3,0,0,54)
        info.StudsOffset = Vector3.new(3.6,-3,0)
        info.AlwaysOnTop = true
        info.ClipsDescendants = false
        local namelabel = Instance.new("TextLabel", info)
        namelabel.Name = "namelabel"
        namelabel.BackgroundTransparency = 1
        namelabel.TextStrokeTransparency = 0
        namelabel.TextXAlignment = Enum.TextXAlignment.Left
        namelabel.Size = UDim2.new(0,100,0,18)
        namelabel.Position = UDim2.new(0,0,0,0)
        namelabel.Text = player.Name
        local distancel = Instance.new("TextLabel", info)
        distancel.Name = "distancelabel"
        distancel.BackgroundTransparency = 1
        distancel.TextStrokeTransparency = 0
        distancel.TextXAlignment = Enum.TextXAlignment.Left
        distancel.Size = UDim2.new(0,100,0,18)
        distancel.Position = UDim2.new(0,0,0,18)
        local healthl = Instance.new("TextLabel", info)
        healthl.Name = "healthlabel"
        healthl.BackgroundTransparency = 1
        healthl.TextStrokeTransparency = 0
        healthl.TextXAlignment = Enum.TextXAlignment.Left
        healthl.Size = UDim2.new(0,100,0,18)
        healthl.Position = UDim2.new(0,0,0,36)
        
        local uill = Instance.new("UIListLayout", info)
        
        local forhealth = Instance.new("BillboardGui", bbg)
        forhealth.Name = "forhealth"
        forhealth.Size = UDim2.new(5,0,6,0)
        forhealth.AlwaysOnTop = true
        forhealth.ClipsDescendants = false
        
        local healthbar = Instance.new("Frame", forhealth)
        healthbar.Name = "healthbar"
        healthbar.BackgroundColor3 = Color3.fromRGB(40,40,40)
        healthbar.BorderColor3 = Color3.fromRGB(0,0,0)
        healthbar.Size = UDim2.new(0.04,0,0.9,0)
        healthbar.Position = UDim2.new(0,0,0.05,0)
        local bar = Instance.new("Frame", healthbar)
        bar.Name = "bar"
        bar.BorderSizePixel = 0
        bar.BackgroundColor3 = Color3.fromRGB(94,255,69)
        bar.AnchorPoint = Vector2.new(0,1)
        bar.Position = UDim2.new(0,0,1,0)
        bar.Size = UDim2.new(1,0,1,0)
        
        local co = coroutine.create(function()
            while wait(0.1) do
                if (player.Character and player.Character:FindFirstChild"HumanoidRootPart") then
                    bbg.Adornee = player.Character.HumanoidRootPart
                    info.Adornee = player.Character.HumanoidRootPart
                    forhealth.Adornee = player.Character.HumanoidRootPart
                    
                    if (player.Team ~= localplayer.Team) then
                        bbg.Enabled = true
                        info.Enabled = true
                        forhealth.Enabled = true
                    end
                    if player.Character:FindFirstChild("ForceField") then
                        outlines.BackgroundTransparency = 0.4
                        left.BackgroundTransparency = 0.4
                        right.BackgroundTransparency = 0.4
                        up.BackgroundTransparency = 0.4
                        down.BackgroundTransparency = 0.4
                        healthl.TextTransparency = 0.4
                        healthl.TextStrokeTransparency = 0.8
                        distancel.TextTransparency = 0.4
                        distancel.TextStrokeTransparency = 0.8
                        namelabel.TextTransparency = 0.4
                        namelabel.TextStrokeTransparency = 0.8
                        bar.BackgroundTransparency = 0.4
                        healthbar.BackgroundTransparency = 0.8
                    else
                        outlines.BackgroundTransparency = 0
                        left.BackgroundTransparency = 0
                        right.BackgroundTransparency = 0
                        up.BackgroundTransparency = 0
                        down.BackgroundTransparency = 0
                        healthl.TextTransparency = 0
                        healthl.TextStrokeTransparency = 0
                        distancel.TextTransparency = 0
                        distancel.TextStrokeTransparency = 0
                        namelabel.TextTransparency = 0
                        namelabel.TextStrokeTransparency = 0
                        bar.BackgroundTransparency = 0
                        healthbar.BackgroundTransparency = 0
                    end
                    if cheats.b_b == true then
                        outlines.Visible = true
                    else
                        outlines.Visible = false
                    end
                    if cheats.b_f == true then
                        if player.Character:FindFirstChild("ForceField") then
                            outlines.BackgroundTransparency = 0.9
                        else
                            outlines.BackgroundTransparency = cheats.b_f_t
                        end
                    else
                        outlines.BackgroundTransparency = 1
                    end
                    if cheats.b_sh == true then
                        if (player.Character:FindFirstChild"Humanoid") then
                            healthl.Text = "Health: "..math.floor(player.Character:FindFirstChild"Humanoid".Health)
                            healthbar.bar.Size = UDim2.new(1,0,player.Character:FindFirstChild"Humanoid".Health/player.Character:FindFirstChild"Humanoid".MaxHealth,0)
                        end
                        if cheats.b_ht == "Text" then
                            healthbar.Visible = false
                            healthl.Visible = true
                        end
                        if cheats.b_ht == "Bar" then
                            healthl.Visible = false
                            healthbar.Visible = true
                        end
                        if cheats.b_ht == "Both" then
                            healthl.Visible = true
                            healthbar.Visible = true
                        end
                    else
                        healthl.Visible = false
                        healthbar.Visible = false
                    end
                    if cheats.b_sn then
                        namelabel.Visible = true
                    else
                        namelabel.Visible = false
                    end
                    if cheats.b_sd == true then
                        distancel.Visible = true
                        if (localplayer.Character and localplayer.Character:FindFirstChild"HumanoidRootPart") then
                            distancel.Text = "Distance: "..math.floor(0.5+(localplayer.Character:FindFirstChild"HumanoidRootPart".Position - player.Character:FindFirstChild"HumanoidRootPart".Position).magnitude)
                        end
                    else
                        distancel.Visible = false
                    end
                    if cheats.b_rt == true then
                        if (player.Team == localplayer.Team) then
                            bbg.Enabled = true
                            info.Enabled = true
                            forhealth.Enabled = true
                        end
                    else
                        if (player.Team == localplayer.Team) then
                            bbg.Enabled = false
                            info.Enabled = false
                            forhealth.Enabled = false
                        end
                    end
                    if cheats.b_tc == true then
                        outlines.BackgroundColor3 = player.TeamColor.Color
                        left.BackgroundColor3 = player.TeamColor.Color
                        right.BackgroundColor3 = player.TeamColor.Color
                        up.BackgroundColor3 = player.TeamColor.Color
                        down.BackgroundColor3 = player.TeamColor.Color
                        healthl.TextColor3 = player.TeamColor.Color
                        distancel.TextColor3 = player.TeamColor.Color
                        namelabel.TextColor3 = player.TeamColor.Color
                    else
                        if (player.Team == localplayer.Team) then
                            outlines.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
                            left.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
                            right.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
                            up.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
                            down.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
                            healthl.TextColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
                            distancel.TextColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
                            namelabel.TextColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
                        else
                            outlines.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
                            left.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
                            right.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
                            up.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
                            down.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
                            healthl.TextColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
                            distancel.TextColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
                            namelabel.TextColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
                        end
                    end
                end
                if not (game:GetService"Players":FindFirstChild(player.Name)) then
                    print(player.Name.." has left. Clearing esp.")
                    espf:FindFirstChild(player.Name):Destroy()
                    coroutine.yield()
                end
            end
        end)
        coroutine.resume(co)
    end

    --main
    do
        wait(2)
        --initial player addition
        for _,v in pairs(game:GetService("Players"):GetChildren()) do
            if not (v.Name == localplayer.Name) then
                if not (espf:FindFirstChild(v.Name)) then
                    addEsp(v)
                end
            end
        end
        
        --auto-update
        while wait(10) do
            for _,v in pairs(game:GetService("Players"):GetChildren()) do
                if not (v.Name == localplayer.Name) then
                    if not (espf:FindFirstChild(v.Name)) then
                        addEsp(v)
		                  	end
                    end
                end
            end
        end
    end
end
